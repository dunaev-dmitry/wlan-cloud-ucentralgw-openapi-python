"""
    uCentral gateway API

    A process to manage configuration for devices.  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Contact: ucentralsupport@arilia.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.command_details import CommandDetails
from openapi_client.model.command_info import CommandInfo
from openapi_client.model.command_info_list import CommandInfoList
from openapi_client.model.device_capabilities import DeviceCapabilities
from openapi_client.model.device_configure_request import DeviceConfigureRequest
from openapi_client.model.device_log_list import DeviceLogList
from openapi_client.model.device_status import DeviceStatus
from openapi_client.model.event_queue_request import EventQueueRequest
from openapi_client.model.factory_request import FactoryRequest
from openapi_client.model.generic_error_response import GenericErrorResponse
from openapi_client.model.generic_good_answer import GenericGoodAnswer
from openapi_client.model.health_check_list import HealthCheckList
from openapi_client.model.leds_request import LEDsRequest
from openapi_client.model.message_request import MessageRequest
from openapi_client.model.reboot_request import RebootRequest
from openapi_client.model.rtty_session_details import RttySessionDetails
from openapi_client.model.trace_request import TraceRequest
from openapi_client.model.upgrade_request import UpgradeRequest
from openapi_client.model.wifi_scan_request import WifiScanRequest


class CommandsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __delete_a_command(
            self,
            command_uuid,
            **kwargs
        ):
            """Delete a specific command  # noqa: E501

            Delete a specific command  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_a_command(command_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                command_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GenericGoodAnswer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['command_uuid'] = \
                command_uuid
            return self.call_with_http_info(**kwargs)

        self.delete_a_command = _Endpoint(
            settings={
                'response_type': (GenericGoodAnswer,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/command/{commandUUID}',
                'operation_id': 'delete_a_command',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'command_uuid',
                ],
                'required': [
                    'command_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'command_uuid':
                        (str,),
                },
                'attribute_map': {
                    'command_uuid': 'commandUUID',
                },
                'location_map': {
                    'command_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_a_command
        )

        def __delete_commands(
            self,
            serial_number,
            **kwargs
        ):
            """Delete some commands  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_commands(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GenericGoodAnswer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.delete_commands = _Endpoint(
            settings={
                'response_type': (GenericGoodAnswer,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/commands',
                'operation_id': 'delete_commands',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                },
                'location_map': {
                    'serial_number': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_commands
        )

        def __delete_device_capabilities(
            self,
            serial_number,
            **kwargs
        ):
            """Delete the capabilities for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_device_capabilities(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GenericGoodAnswer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.delete_device_capabilities = _Endpoint(
            settings={
                'response_type': (GenericGoodAnswer,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/capabilities',
                'operation_id': 'delete_device_capabilities',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_device_capabilities
        )

        def __delete_device_health_checks(
            self,
            serial_number,
            **kwargs
        ):
            """Delete some device health checks  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_device_health_checks(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GenericGoodAnswer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.delete_device_health_checks = _Endpoint(
            settings={
                'response_type': (GenericGoodAnswer,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/healthchecks',
                'operation_id': 'delete_device_health_checks',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                },
                'location_map': {
                    'serial_number': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_device_health_checks
        )

        def __delete_device_logs(
            self,
            serial_number,
            **kwargs
        ):
            """Delete some device logs  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_device_logs(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                log_type (int): 0=any kind of logs (default) 1=normal logs only 2=crash logs only. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GenericGoodAnswer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.delete_device_logs = _Endpoint(
            settings={
                'response_type': (GenericGoodAnswer,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/logs',
                'operation_id': 'delete_device_logs',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                    'log_type',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                    'log_type':
                        (int,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'log_type': 'logType',
                },
                'location_map': {
                    'serial_number': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                    'log_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_device_logs
        )

        def __delete_device_stats(
            self,
            serial_number,
            **kwargs
        ):
            """Get the latest statistics for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_device_stats(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GenericGoodAnswer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.delete_device_stats = _Endpoint(
            settings={
                'response_type': (GenericGoodAnswer,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/statistics',
                'operation_id': 'delete_device_stats',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                },
                'location_map': {
                    'serial_number': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_device_stats
        )

        def __event_queue_request(
            self,
            serial_number,
            **kwargs
        ):
            """Request a list of queued events  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.event_queue_request(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                event_queue_request (EventQueueRequest): Message request details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.event_queue_request = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/eventrequest',
                'operation_id': 'event_queue_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'event_queue_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'event_queue_request':
                        (EventQueueRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'event_queue_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__event_queue_request
        )

        def __execute_command(
            self,
            serial_number,
            **kwargs
        ):
            """Post a command to a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.execute_command(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                command_details (CommandDetails): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.execute_command = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/command',
                'operation_id': 'execute_command',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'command_details',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'command_details':
                        (CommandDetails,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'command_details': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__execute_command
        )

        def __factory_reset(
            self,
            serial_number,
            **kwargs
        ):
            """Factory reset a device a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.factory_reset(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                factory_request (FactoryRequest): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.factory_reset = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/factory',
                'operation_id': 'factory_reset',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'factory_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'factory_request':
                        (FactoryRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'factory_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__factory_reset
        )

        def __get_a_command_details(
            self,
            command_uuid,
            **kwargs
        ):
            """Returns a specific command  # noqa: E501

            Returns a specific command  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_a_command_details(command_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                command_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CommandInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['command_uuid'] = \
                command_uuid
            return self.call_with_http_info(**kwargs)

        self.get_a_command_details = _Endpoint(
            settings={
                'response_type': (CommandInfo,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/command/{commandUUID}',
                'operation_id': 'get_a_command_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'command_uuid',
                ],
                'required': [
                    'command_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'command_uuid':
                        (str,),
                },
                'attribute_map': {
                    'command_uuid': 'commandUUID',
                },
                'location_map': {
                    'command_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_a_command_details
        )

        def __get_command_list(
            self,
            **kwargs
        ):
            """Returns a list of commands.  # noqa: E501

            Get a list of commands.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_command_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                serial_number (str): [optional]
                start_date (int): [optional]
                end_date (int): [optional]
                offset (int): [optional]
                limit (int): [optional]
                newest (bool): Selecting this option means the newest record will be returned. Use limit to select how many.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CommandInfoList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_command_list = _Endpoint(
            settings={
                'response_type': (CommandInfoList,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/commands',
                'operation_id': 'get_command_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                    'offset',
                    'limit',
                    'newest',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'newest':
                        (bool,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'offset': 'offset',
                    'limit': 'limit',
                    'newest': 'newest',
                },
                'location_map': {
                    'serial_number': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'offset': 'query',
                    'limit': 'query',
                    'newest': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_command_list
        )

        def __get_device_capabilities(
            self,
            serial_number,
            **kwargs
        ):
            """Get the latest capabilities for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_capabilities(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeviceCapabilities
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.get_device_capabilities = _Endpoint(
            settings={
                'response_type': (DeviceCapabilities,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/capabilities',
                'operation_id': 'get_device_capabilities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_capabilities
        )

        def __get_device_health_checks(
            self,
            serial_number,
            **kwargs
        ):
            """Get the latest health checks for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_health_checks(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                offset (int): [optional]
                limit (int): [optional]
                newest (bool): Selecting this option means the newest record will be returned. Use limit to select how many.. [optional]
                last_only (bool): Selecting this option means the last healthcheck will be returned. All other parameters will be ignored.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                HealthCheckList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.get_device_health_checks = _Endpoint(
            settings={
                'response_type': (HealthCheckList,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/healthchecks',
                'operation_id': 'get_device_health_checks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                    'offset',
                    'limit',
                    'newest',
                    'last_only',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'newest':
                        (bool,),
                    'last_only':
                        (bool,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'offset': 'offset',
                    'limit': 'limit',
                    'newest': 'newest',
                    'last_only': 'lastOnly',
                },
                'location_map': {
                    'serial_number': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                    'offset': 'query',
                    'limit': 'query',
                    'newest': 'query',
                    'last_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_health_checks
        )

        def __get_device_logs(
            self,
            serial_number,
            **kwargs
        ):
            """Get the latest logs for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_logs(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                offset (int): [optional]
                limit (int): [optional]
                log_type (int): 0=any kind of logs (default) 0=normal logs only 1=crash logs only. [optional]
                newest (bool): Selecting this option means the newest record will be returned. Use limit to select how many.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeviceLogList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.get_device_logs = _Endpoint(
            settings={
                'response_type': (DeviceLogList,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/logs',
                'operation_id': 'get_device_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                    'offset',
                    'limit',
                    'log_type',
                    'newest',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'log_type':
                        (int,),
                    'newest':
                        (bool,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'offset': 'offset',
                    'limit': 'limit',
                    'log_type': 'logType',
                    'newest': 'newest',
                },
                'location_map': {
                    'serial_number': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                    'offset': 'query',
                    'limit': 'query',
                    'log_type': 'query',
                    'newest': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_logs
        )

        def __get_device_stats(
            self,
            serial_number,
            **kwargs
        ):
            """Get the latest statistics for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_stats(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                start_date (int): [optional]
                end_date (int): [optional]
                offset (int): [optional]
                limit (int): [optional]
                lifetime (bool): Selecting this option means the LifetimeStatistics will be returned. All other parameters will be ignored.. [optional]
                last_only (bool): Selecting this option means the LifetimeStatistics will be returned. All other parameters will be ignored.. [optional]
                newest (bool): Selecting this option means the newest record will be returned. Use limit to select how many.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.get_device_stats = _Endpoint(
            settings={
                'response_type': (object,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/statistics',
                'operation_id': 'get_device_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'start_date',
                    'end_date',
                    'offset',
                    'limit',
                    'lifetime',
                    'last_only',
                    'newest',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'start_date':
                        (int,),
                    'end_date':
                        (int,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'lifetime':
                        (bool,),
                    'last_only':
                        (bool,),
                    'newest':
                        (bool,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'offset': 'offset',
                    'limit': 'limit',
                    'lifetime': 'lifetime',
                    'last_only': 'lastOnly',
                    'newest': 'newest',
                },
                'location_map': {
                    'serial_number': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                    'offset': 'query',
                    'limit': 'query',
                    'lifetime': 'query',
                    'last_only': 'query',
                    'newest': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_stats
        )

        def __get_device_status(
            self,
            serial_number,
            **kwargs
        ):
            """Get the latest status for a given device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_status(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeviceStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.get_device_status = _Endpoint(
            settings={
                'response_type': (DeviceStatus,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/status',
                'operation_id': 'get_device_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_status
        )

        def __get_rtty_session_info(
            self,
            serial_number,
            **kwargs
        ):
            """Get the rtty parameters to initiate a session  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_rtty_session_info(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RttySessionDetails
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.get_rtty_session_info = _Endpoint(
            settings={
                'response_type': (RttySessionDetails,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/rtty',
                'operation_id': 'get_rtty_session_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_rtty_session_info
        )

        def __leds_request(
            self,
            serial_number,
            **kwargs
        ):
            """Blink the LEDs on a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.leds_request(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                leds_request (LEDsRequest): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.leds_request = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/leds',
                'operation_id': 'leds_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'leds_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'leds_request':
                        (LEDsRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'leds_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__leds_request
        )

        def __message_request(
            self,
            serial_number,
            **kwargs
        ):
            """Request a specific message  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.message_request(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                message_request (MessageRequest): Message request details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                object
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.message_request = _Endpoint(
            settings={
                'response_type': (object,),
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/request',
                'operation_id': 'message_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'message_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'message_request':
                        (MessageRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__message_request
        )

        def __reboot_device(
            self,
            serial_number,
            **kwargs
        ):
            """Upgrade a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reboot_device(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                reboot_request (RebootRequest): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.reboot_device = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/reboot',
                'operation_id': 'reboot_device',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'reboot_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'reboot_request':
                        (RebootRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'reboot_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__reboot_device
        )

        def __trace_request(
            self,
            serial_number,
            **kwargs
        ):
            """Launch a trace for a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.trace_request(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                trace_request (TraceRequest): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.trace_request = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/trace',
                'operation_id': 'trace_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'trace_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'trace_request':
                        (TraceRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'trace_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__trace_request
        )

        def __update_configuration_for_a_device(
            self,
            serial_number,
            **kwargs
        ):
            """Configura a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_configuration_for_a_device(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                device_configure_request (DeviceConfigureRequest): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.update_configuration_for_a_device = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/configure',
                'operation_id': 'update_configuration_for_a_device',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'device_configure_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'device_configure_request':
                        (DeviceConfigureRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'device_configure_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_configuration_for_a_device
        )

        def __upgrade_device_firmware(
            self,
            serial_number,
            **kwargs
        ):
            """Upgrade a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upgrade_device_firmware(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                upgrade_request (UpgradeRequest): Command details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.upgrade_device_firmware = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/upgrade',
                'operation_id': 'upgrade_device_firmware',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'upgrade_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'upgrade_request':
                        (UpgradeRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'upgrade_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__upgrade_device_firmware
        )

        def __wifiscan_request(
            self,
            serial_number,
            **kwargs
        ):
            """Launch a wifi scan for a device  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.wifiscan_request(serial_number, async_req=True)
            >>> result = thread.get()

            Args:
                serial_number (str):

            Keyword Args:
                wifi_scan_request (WifiScanRequest): Scan details. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['serial_number'] = \
                serial_number
            return self.call_with_http_info(**kwargs)

        self.wifiscan_request = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth',
                    'bearerAuth'
                ],
                'endpoint_path': '/device/{serialNumber}/wifiscan',
                'operation_id': 'wifiscan_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial_number',
                    'wifi_scan_request',
                ],
                'required': [
                    'serial_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial_number':
                        (str,),
                    'wifi_scan_request':
                        (WifiScanRequest,),
                },
                'attribute_map': {
                    'serial_number': 'serialNumber',
                },
                'location_map': {
                    'serial_number': 'path',
                    'wifi_scan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__wifiscan_request
        )
